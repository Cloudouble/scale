# ---CUSTOMISE THESE---

accountId="771795544492"
systemProperName="LiveElementScale"
lambdaNamespace="liveelement-scale"
coreBucket="scale.live-element.net"
coreRegion="ap-southeast-2"
edgeRegion="us-east-1"
logBucket="log.scale.live-element.net"
requestBucket="request.scale.live-element.net"
envSystemRoot="_"
envShared="0"
sudoName="system"

declare -A requestBuckets
requestBuckets["_"]="$coreRegion.$requestBucket"
requestBuckets["ap-southeast-1"]="ap-southeast-1.$requestBucket"
requestBuckets["us-east-1"]="us-east-1.$requestBucket"

# ---GENERATED BUT CUSTOMISABLE---
envAuthenticationNamespace="$systemProperName"
websocketApiName="$systemProperName-Websocket"
lambdaRole="$systemProperName"
lambdaRoleArn='arn:aws:iam::'$accountId':role/'$lambdaRole
lambdaPolicyStatement='{
    "Effect": "Allow",
    "Principal": {
        "AWS": "'$lambdaRoleArn'"
    },
    "Action": ["s3:DeleteObject","s3:GetObject","s3:PutObject"],
    "Resource": "arn:aws:s3:::'$coreBucket'/*"
}'
lambdaPolicyName="$lambdaRole"

coreBucketCors='{
  "CORSRules": [
    {
      "AllowedOrigins": ["*"],
      "AllowedHeaders": ["*"],
      "AllowedMethods": ["GET", "POST", "PUT", "DELETE", "HEAD"],
      "MaxAgeSeconds": 86400,
      "ExposeHeaders": ["ETag"]
    }
  ]
}'

requestBucketLifeCycleConfiguration='{
    "Rules": [
        {
            "Expiration": {
                "Days": 1
            },
            "ID": "'$systemProperName'",
            "Filter": {},
            "Status": "Enabled",
            "NoncurrentVersionExpiration": {
                "NoncurrentDays": 1
            },
            "AbortIncompleteMultipartUpload": {
                "DaysAfterInitiation": 1
            }
        }
    ]
}'


lambdaPolicy='{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "LiveElement0",
            "Effect": "Allow",
            "Action": "lambda:InvokeFunction",
            "Resource": "arn:aws:lambda:*:'$accountId':function:*"
        },
        {
            "Sid": "LiveElement1",
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "sts:AssumeRole",
                "logs:CreateLogStream",
                "s3:DeleteObjectVersion",
                "s3:ListBucketVersions",
                "s3:ListBucket",
                "execute-api:Invoke",
                "s3:DeleteObject",
                "execute-api:ManageConnections",
                "s3:GetObjectVersion"
            ],
            "Resource": [
                "arn:aws:iam::'$accountId':role/'$lambdaRole'",
                "arn:aws:logs:*:'$accountId':log-group:*",
                "arn:aws:s3:::'$coreBucket'",
                "arn:aws:s3:::*/*", 
                "arn:aws:execute-api:*:'$accountId':*/*/*/*"
            ]
        },
        {
            "Sid": "LiveElement2",
            "Effect": "Allow",
            "Action": "logs:PutLogEvents",
            "Resource": "arn:aws:logs:*:'$accountId':log-group:*:log-stream:*"
        },
        {
            "Sid": "LiveElement3",
            "Effect": "Allow",
            "Action": "logs:CreateLogGroup",
            "Resource": "arn:aws:logs:*:'$accountId':log-group:*"
        }
    ]
}'

assumeRolePolicy='{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": [
                    "edgelambda.amazonaws.com",
                    "lambda.amazonaws.com"
                ]
            },
            "Action": "sts:AssumeRole"
        }
    ]
}'


lambdaEnvCoreRequest='env = {"bucket": "'$coreBucket'", "system_proper_name": "'$systemProperName'", "account_id": "'$accountId'", "core_region": "'$coreRegion'", "lambda_role": "'$lambdaRole'", "lambda_namespace": "'$lambdaNamespace'", "system_root": "'$envSystemRoot'", "shared": '$envShared', "authentication_namespace": "'$envAuthenticationNamespace'"}'
lambdaEnvCoreSchema='env = {"bucket": "'$coreBucket'", "system_proper_name": "'$systemProperName'", "account_id": "'$accountId'", "core_region": "'$coreRegion'", "lambda_role": "'$lambdaRole'", "lambda_namespace": "'$lambdaNamespace'", "system_root": "'$envSystemRoot'", "data_root": "'$envSystemRoot'"}'
lambdaEnvTriggerProxy='env = {"bucket": "'$coreBucket'", "system_proper_name": "'$systemProperName'", "account_id": "'$accountId'", "core_region": "'$coreRegion'", "lambda_role": "'$lambdaRole'", "lambda_namespace": "'$lambdaNamespace'", "system_root": "'$envSystemRoot'", "shared": '$envShared', "authentication_namespace": "'$envAuthenticationNamespace'"}'
lambdaEnvRegion='env = {"bucket": "'$coreBucket'", "system_proper_name": "'$systemProperName'", "account_id": "'$accountId'", "core_region": "'$coreRegion'", "lambda_role": "'$lambdaRole'", "core_request_bucket": "'$requestBucket'"}'

cachePolicyDocumentStandard='{
    "Name": "'$systemProperName'Standard",
    "DefaultTTL": 86400,
    "MaxTTL": 31536000,
    "MinTTL": 1,
    "ParametersInCacheKeyAndForwardedToOrigin": {
        "CookiesConfig": {
            "CookieBehavior": "all"
        },
        "QueryStringsConfig": {
            "QueryStringBehavior": "all"
        },
        "EnableAcceptEncodingGzip": true,
        "EnableAcceptEncodingBrotli": true,
        "HeadersConfig": {
            "HeaderBehavior": "whitelist",
            "Headers": {
                "Quantity": 6,
                "Items":["Authorization","Origin","Accept","Access-Control-Request-Method","Access-Control-Request-Headers","'$envAuthenticationNamespace'Connection"]
            }
        }
    }
}'

cachePolicyDocumentDisabled='{
    "Name": "'$systemProperName'Disabled",
    "DefaultTTL": 0,
    "MaxTTL": 0,
    "MinTTL": 0,
    "ParametersInCacheKeyAndForwardedToOrigin": {
        "CookiesConfig": {
            "CookieBehavior": "none"
        },
        "QueryStringsConfig": {
            "QueryStringBehavior": "none"
        },
        "EnableAcceptEncodingGzip": false,
        "EnableAcceptEncodingBrotli": false,
        "HeadersConfig": {
            "HeaderBehavior": "none"
        }
    }
}'

originRequestPolicyStandard='{
    "Name": "'$systemProperName'Standard", 
    "HeadersConfig": {
        "HeaderBehavior": "whitelist", 
        "Headers": {
            "Quantity": 6, 
            "Items": ["Origin","'$envAuthenticationNamespace'Connection","Access-Control-Request-Method","Accept","Access-Control-Request-Headers","Referer","Sec-WebSocket-Key","Sec-WebSocket-Version","Sec-WebSocket-Protocol","Sec-WebSocket-Accept"]
        }
    }, 
    "CookiesConfig": {
        "CookieBehavior": "all"
    }, 
    "QueryStringsConfig": {
        "QueryStringBehavior": "all"
    }
}'
