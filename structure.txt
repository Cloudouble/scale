{root}/{partition}/{path}


System Partition: the objects that run the system
{root}/system/{scope}/{package}/{module}.{json|html|js}     - all packages have the same potential directory structure as core

*_/system/core/application/{name}.json           - PWA apps hosted on public directories
_/system/core/authentication/{name}.json        - connection gateways 
_/system/core/compute/{name}.json               - adapters for running the compute system on third-party technology stacks (e.g. aws, azure, baremetal)
_/system/core/connect/{name}.json               - adapters for running the connet system on third-party technology stacks (e.g. aws, azure, baremetal)
_/system/core/curator/{name}.json               - scheduled or on-demand processes that do clean up
*_/system/core/datatype/{name}.json              - definitions of datatypes that fields can validate against
*_/system/core/element/{name}.json               - HTML elements for rendering datatypes as per https://github.com/Cloudouble/element and https://github.com/Cloudouble/schema
_/system/core/error/core/{code}.json                 - HTML error pages
*_/system/core/environment/{name}.json           - core system contexts which are passed to processors as the `env` variable {root: '_', namespace: 'liveelement', @name: {name}}
_/system/core/exporter/{name}.json              - scheduled or on-demand processes that export some or all of the current system state (core, scratchpad, time, archive, record, connection, output)
*_/system/core/recordfield/{name}.json                 - definitions of fields that records can have
_/system/core/importer/{name}.json              - processes that respond to matching import files and process them into state updates (core, scratchpad, time, archive, record, connection, output)
*_/system/core/mask/{name}.json                  - maps of permissions that are applied to connections, matched as a result of successful authentication
*_/system/core/namespace/{name}.json             - definitions of separate databases that can be powered by this system
*_/system/core/package/core/index.json                - bundles of features to add functionality to the system
_/system/core/packager/{name}.json              - scheduled or on-demand processes that build packages from the system
*_/system/core/policy/{name}.json                - security policies to define levels of system access that are applied to processors
*_/system/core/processor/{name}.json             - executable code that performs tasks within the system, used by other system features
*_/system/core/query/{name}.json                 - processes that create pre-compiled result sets from records
*_/system/core/reacter/{name}.json               - processes that react to system changes
*_/system/core/recordtype/{name}.json            - definitions of all the types of records that are allowed on the system 
*_/system/core/render/{name}.json                - javascript rendering definitions as per https://github.com/Cloudouble/schema
*_/system/core/schedule/{name}.json              - definitions of regular event triggers that can be used to make processes happen automatically
*_/system/core/schema/{name}.json                - namespaced collections of record types
_/system/core/store/{name}.json                 - adapters for running the store system on third-party technology stacks (e.g. aws, azure, baremetal)
*_/system/core/connectiontype/{name}.json        - definitions of different kinds of third-parties and how they interact with the system
_/system/core/shape/{name}.json             - definitions that are used to validate object types
_/system/core/view/{name}.json                  - definitions that are used to render records and query results into output for connections to consume



ScratchPad Partition: intermediate objects written to and read only by the system
{root}/scratchpad/{path}.json

_/scratchpad/value/{hash}/{field}.json                          - list records having this field value 
_/scratchpad/query/{name}.json                                  - list matching records
_/scratchpad/field/{name}/query.json                            - list queries watching this field
_/scratchpad/field/{name}/record.json                           - list records containing this field
_/scratchpad/listener/query/{query}/{connectiontype}.json       - list $connectiontype listening query
_/scratchpad/listener/record/{record}/{connectiontype}.json     - list $connectiontype listening record
_/scratchpad/listener/export/{name}/{connectiontype}.json       - list $connectiontype listening export
_/scratchpad/listener/view/{name}/{connectiontype}.json         - list $connectiontype listening view
_/scratchpad/asset/{hash}/view.json                             - list views depending on asset



LastModified Partition: object which record when other corresponding objects on other partitions were last modified, all values are a single timestamp
{root}/lastmodified/{partition}/{path}

_/lastmodified/core/*
_/lastmodified/scratchpad/*
_/lastmodified/blob/*
_/lastmodified/record/*
_/lastmodified/import/*
_/lastmodified/connection/*
_/lastmodified/output/*



Archive Partition: stores a copy of the target object as at {time}, with .{time} appended to the target object path
{root}/lastmodified/{partition}/{path}.{time}

_/archive/core/*.{time}
_/archive/scratchpad/*.{time}
_/archive/blob/*.{time}
_/archive/record/*.{time}
_/archive/import/*.{time}
_/archive/connection/*.{time}
_/archive/output/*.{time}



Request Partition: Connect platforms write request objects here with a requested change to the system
{root}/request/{uuid}.json

_/request/{uuid}.json



Blob Partition: Connect platforms write blob objects here as a large / unstructured file storage facility
{root}/blob/{path}

_/blob/{path}



Record Partition: the actual structured data being managed by the system
{root}/record/{uuid}.json

_/record/{uuid}.json



Connection Partition: objects defining third-party connections to the system that may read or write data
{root}/connection/{connectiontype}/{identifier}/{path}.json

_/connection/{connectiontype}/{identifier}/connect.json
_/connection/{connectiontype}/{identifier}/listen.json {{object type}: { {object identifier}: "{view}" }}



Output Partition: objects that are compiled from records, query results or exports, being made accessible to connections
{root}/output/{source object type}/{source object identifier}/{connectiontype}/{connection identifier}/{listener name}.{view name}

_/output/query/{query}/{connectiontype}/{uuid}/{listener}.{view}      
_/output/record/{record}/{connectiontype}/{uuid}/{listener}.{view}
_/output/export/{export}/{connectiontype}/{uuid}/{listener}.{view}

---
**********************************************
*** Core comes installed as standard with: *** 
application: console
authentication: sudo, email-code, password, sms-code, key, public
curator: request, archive, connection, output
datatype: Boolean, Date, DateTime, Number, Text, Time
error: 400, 401, 403, 404, 405, 410, 413, 414, 415, 500, 501, 502, 503
exporter: csv, json, zip
importer: csv, json, zip
mask: sudo, administrator, connection, readonly
package: core
packager: core
platform: https-aws-cloudfront, websocket-aws-apigateway
policy: core, reacter, trusted, semitrusted, untrusted
processor: all processors from the core package
query: math, list, filter
schedule: second, minute, hour, day, week, month, year
schema: see below 
connectiontype:  channel, connection, daemon, publisher, replicator, repository, tunnel
view: csv, html, json, jsonld, microdata, xml, yaml, zip

Built-in schema version: get latest release number from https://schema.org/version/latest, then use versioned feed for current-https as at https://raw.githubusercontent.com/schemaorg/schemaorg/main/data/releases/12.0/schemaorg-current-https.jsonld

**********************************************

Processor Naming: 

$namespace-$package--$name
$namespace-$package-$scope-$name


Core Processors:

* core-reacter-request(path, operation) # path => standardised to part after root e.g. request/uuid.json
* core-validator-*(object_type, object_identifier, object_live)
    * core-validator-core(scope, module, live)
    * core-validator-record(record_uuid, live)
    * core-validator-import(path, body, content_type, encoding)
    * core-validator-connection(connection_type, connection_identifier, trailer, live)
* core-mask(connection_type, connection_identifier, operation, path, live)
* core-store(object_identifier, object_data)
* core-reacter-connection(path, operation)
* core-reacter-core-asset(path, operation)
* core-reacter-core-view(path, operation)
* core-reacter-core-query(path, operation)
* core-reacter-import(path, operation)
* core-reacter-record(path, operation)
* core-record(record_uuid)
* core-reacter-scratchpad-value(path, operation)
* core-query(query_name, record_uuid)
* core-reacter-scratchpad-query(path, operation)
* core-output(object_type, object_identifier, connection_identifier, listener_name)
* core-view(view_name)
* core-authentication(authentication_module_name, credentials_object)

Process Flow: 

1: A request comes in via a Connect platform, writes a request to _/request   {operation, path, body, content_type, encoding, connection_type, connection_identifier}


2: $namespace-core-reacter-request reacts to the new object, 
    - sync calls $namespace-core-validator-*(object_type, object_identifier, object_live) to validate according to it's object type (definition in _/system/validator/{object_type}.json)
    - sync calls $namespace-core-mask(connection_type, connection_identifier, object_type, object_identifier, object_live) to mask according to the connection @mask (_/system/mask/{_/connection/.../connect.json['@mask']}.json)
    - async calls $namespace-core-store(object identifier, object data)
    
3: $namespace-core-store(object identifier, object data) write the masked object to the Store platform in core|record|import|connection
    - also takes care of the corresponding updates to the _/lastmodified and _/archive partitions

4: $namespace-core-reacter-{connection|core|import|record} reacts to the new/updated/delete object in it's partition
    - $namespace-core-reacter-connection
        - when it's the connect.json object:
            - if object contains no @mask property and has a valid authentication module name as a field with an object (credentials) as its value, 
                then sync calls $namespace-core--authentication(authentication module name, credentials) which returns @mask and @name
                    then writes the integrated result back to the connect.json object
        - when it's the listen.json object: 
            - updates scratchpad values for ../query/{query}/{connectiontype}.json, ../record/{record}/{connectiontype}.json
                ../export/{name}/{connectiontype}.json and ../view/{name}/{connectiontype}.json
            
    - $namespace-core-reacter-core-*
        - $namespace-core-reacter-core-asset uses ../asset/{hash}/view.json to find affected views and 
            for each affected view async calls $namespace-core--view(view name) 
        - $namespace-core-reacter-core-view updates scratchpad values for ../asset/{hash}/view.json 
        - $namespace-core-reacter-core-query udpates scratchpad values for ../field/{name}/query.json 
        
    - $namespace-core-reacter-import checks _/system/importer/* for an importer with the given key and async calls it (import identifier)
        - the importer's processor writes its output as _/request/* objects only, with the connection being inherited from the original connection
            
    - $namespace-core-reacter-record => updates scratchpad values for ../value/{hash}/{field}.json and ../field/{name}/record.json
        and also async calls $namespace-core-record(record uuid)
        
4: $namespace-core-record(record uuid) uses _/scratchpad/listener/record/{record}/{connectiontype}.json to find affected listeners
    - for each affected listener async calls $namespace-core-output("record", record uuid, connection identifier, listener name)

5: $namespace-core-reacter-scratchpad-value reacts to _/scratchpad/value/{hash}/{field}.json
    - uses _/scratchpad/field/{name}/query.json to get affected queries
    - for each affected query async calls $namespace-core--query(query name, record uuid)

6: $namespace-core-query(query name, record uuid) writes to _/scratchpad/query/{name}.json

7: $namespace-core-reacter-scratchpad-query reacts to _/scratchpad/query/{name}.json and uses _/scratchpad/listener/query/{query}/{connectiontype}.json to find affected listeners
    - for each affected listener async calls $namespace-core--output("query", query name, connection identifier, listener name)

9: $namespace-core-output(object type, object identifier, connection identifier, listener name)
    - retrieves connection connect.json and listen.json objects
    - if connection and listener name exists:
        - retrieve object itself (queries retreive batches of up to 1000 records)
        - retrieve view object
        - sync call the view processor 
        - write the result to the relevant path in the _/output partition

--

A: $namespace-core-view(view name) when given a view name uses _/scratchpad/listener/view/{name}/{connectiontype}.json to find affected connections
    - for each affected connection uses its listen.json object to find the relevent target objects
        - for each target object async calls $namespace-core--output(object type, object identifier, connection id, listener name)

B: $namespace-core-authentication(authentication module name, credentials) sync calls the given authentication module(credentials)
    - if module returns True then return the relevant @mask and @name values
    - if module returns False then return empty @mask and @name values
 

Object Types: 

System: {scope}/{module}

application/{name}.json           - PWA apps hosted on public directories
authentication/{name}.json        - connection gateways 
compute/{name}.json               - adapters for running the compute system on third-party technology stacks (e.g. aws, azure, baremetal)
connect/{name}.json               - adapters for running the connet system on third-party technology stacks (e.g. aws, azure, baremetal)
curator/{name}.json               - scheduled or on-demand processes that do clean up
datatype/{name}.json              - definitions of datatypes that fields can validate against
element/{name}.json               - HTML elements for rendering datatypes as per https://github.com/Cloudouble/element and https://github.com/Cloudouble/schema
error/{code}.json                 - HTML error pages
environment/{name}.json           - core system contexts which are passed to processors as the `env` variable {root: '_', namespace: 'liveelement', @name: {name}}
exporter/{name}.json              - scheduled or on-demand processes that export some or all of the current system state (core, scratchpad, time, archive, record, connection, output)
field/{name}.json                 - definitions of fields that records can have
importer/{name}.json              - processes that respond to matching import files and process them into state updates (core, scratchpad, time, archive, record, connection, output)
mask/{name}.json                  - maps of permissions that are applied to connections, matched as a result of successful authentication
namespace/{name}.json             - definitions of separate databases that can be powered by this system
package/index.json                - bundles of features to add functionality to the system
packager/{name}.json              - scheduled or on-demand processes that build packages from the system
policy/{name}.json                - security policies to define levels of system access that are applied to processors
processor/{name}.json             - executable code that performs tasks within the system, used by other system features
query/{name}.json                 - processes that create pre-compiled result sets from records
reacter/{name}.json               - processes that react to system changes
recordtype/{name}.json            - definitions of all the types of records that are allowed on the system 
render/{name}.json                - javascript rendering definitions as per https://github.com/Cloudouble/schema
schedule/{name}.json              - definitions of regular event triggers that can be used to make processes happen automatically
schema/{name}.json                - namespaced collections of record types
store/{name}.json                 - adapters for running the store system on third-party technology stacks (e.g. aws, azure, baremetal)
connectiontype/{name}.json        - definitions of different kinds of third-parties and how they interact with the system
validator/{name}.json             - 
view/{name}.json                  - definitions that are used to render records and query results into output for connections to consume



Adaptors:

Adaptors are processors which are deployed in every region of the system 




Connectors:

HTTPS: 
    configuration is a map of paths to methods to partitions/processors
    adapter is cloudfront
    
websocket: 
    configuration is a map of paths
    adapter is apigateway
    


