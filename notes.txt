SYSTEM PATHS

_/schema/classes.json
_/schema/classes/{class_name}.json
_/schema/properties.json
_/schema/properties/{property}.json
_/schema/datatypes.json
_/schema/datatypes/{datatype}.json

_/record/{class_name}/{record_id}.json => canonical record
_/version/{class_name}/{record_id}/{version_id}.json => list of record fields updated for each version
_/index/{class_name}/{field_name}/{sha512 of JSON encoded value}/{record_id}.json

_/vector/{class_name}/{field_name}.json => list of query_ids that have this field_name / class_name as a vector
_/query/{class_name}/{query_id}.json => meta-data about the query {processor, vectors}
_/query/{class_name}/{query_id}/{record_initial}.json => a-z0-9 indexes each containing a list of query matching record_ids that start with that character

_/feed/{class_name}/{query_id}/{connection_id}/{feed_id}.json => each connection that is interested in this query has a feed configuration object stored here
_/subscription/{class_name}/{record_id}/{connection_id}/{subscription_id}.json => each connection that is interested in this record has a subscription configuration object stored here

_/view/{view_id}.json

_/mask/{mask_id}.json

_/system/{scope}/{module}.json

_/error/403.html ... etc for other HTTP error codes ...

---


CONNECTION PATHS

_/connection/{connection_id}/connect.json => metadata about this connection  => GET, POST, PUT, PATCH

_/connection/{connection_id}/record/{class_name}/{record_id}.json => the masked record data for this connection  => GET, POST, PUT, PATCH

_/connection/{connection_id}/query/{class_name}/{query_id}.json => metadata about this query as curated to this connection  => GET, POST, PUT, PATCH
_/connection/{connection_id}/query/{class_name}/{query_id}/{index_initial}.json => a-z0-9 indexes, but only containing records that are non-empty when masked for this connection  => GET

_/connection/{connection_id}/feed/{class_name}/{query_id}/{subscription_id}.json => use this path to write/delete feeds  => GET, POST, PUT, PATCH
_/connection/{connection_id}/feed/{class_name}/{query_id}/{render_field}/{sort_field}/{sort_direction}/{min-index}-{max-index}.{view_suffix} => query data as rendered by the given view, read only => GET

_/connection/{connection_id}/subscription/{class_name}/{record_id}/{subscription_id}.json => use this path to write/delete subscriptions  => GET, POST, PUT, PATCH
_/connection/{connection_id}/subscription/{class_name}/{record_id}.{view_suffix} => record data as rendered by the given view, read only => GET
_/connection/{connection_id}/subscription/{class_name}/{record_id}/{record_field}.{view_suffix} => record field data as rendered by the given view, read only => GET

_/connection/{connection_id}/view/{view_id}.json  => GET, POST, PUT, PATCH
_/connection/{connection_id}/mask/{mask_id}.json  => GET, POST, PUT, PATCH

_/connection/{connection_id}/system/{scope}/{module}.json  => GET, POST, PUT, PATCH

_/connection/{connection_id}/error/{code}.html  => GET, POST, PUT, PATCH


---


DAEMON PATHS

state: install update run pause remove (installed updated running paused removed error)

exactly the same as connection paths with "connection" swapped for "daemon", and these are not open to the internet via the CDN behaviours.

states that do something:

install / update: 
    1: create Lambda function with the daemon code in the core region
    2: writes any start-up views and masks 

run (after install) (trigger by PUT to _/daemon/{daemon_type}/{daemon_id}/daemon.json): 
    1: creates trigger from _/daemon/{daemon_type}/* to it's own Lambda 

pause: 
    1: remove trigger

remove (after pause):
    1: removes any remove views and masks
    2: removes Lambda function


daemon Lambda function functionality: 
    1: invoked by changes in _/daemon/{daemon_type}/*
    2: executes whatever it likes based on the content of the updated objects
    3: writes to the system only via writing to the request bucket

---


BEHAVIOR PATHS

# arn:aws:lambda:us-east-1:771795544492:function:liveelement-scale-edge-accept:8

_/connection/????????-????-????-????-????????????/connect.json => GET, POST, PUT, PATCH => origin request write.py no cache

_/connection/????????-????-????-????-????????????/view/????????-????-????-????-????????????.json  => GET, POST, PUT, PATCH => origin request write.py no cache

_/connection/????????-????-????-????-????????????/asset/*  => GET, POST, PUT, PATCH => origin request write.py no cache
_/connection/????????-????-????-????-????????????/static/*  => GET, POST, PUT, PATCH => origin request write.py no cache

_/connection/????????-????-????-????-????????????/record/*/????????-????-????-????-????????????.json => GET, POST, PUT, PATCH => origin request write.py no cache
_/connection/????????-????-????-????-????????????/record/*/????????-????-????-????-????????????/*.json => GET, POST, PUT, PATCH => origin request write.py no cache

_/connection/????????-????-????-????-????????????/query/*/????????-????-????-????-????????????.json => GET, POST, PUT, PATCH => origin request write.py no cache

_/connection/????????-????-????-????-????????????/feed/*/????????-????-????-????-????????????/????????-????-????-????-????????????.json => GET, POST, PUT, PATCH => origin request write.py no cache

_/connection/????????-????-????-????-????????????/subscription/*/????????-????-????-????-????????????/????????-????-????-????-????????????.json => GET, POST, PUT, PATCH => origin request write.py no cache

_/connection/????????-????-????-????-????????????/system/*/*.json  => GET, POST, PUT, PATCH => origin request write.py no cache


_/connection/????????-????-????-????-????????????/feed/*/????????-????-????-????-????????????/*/*/*/*-*.* => GET => origin response pull.py + cache (no querystring)

_/connection/????????-????-????-????-????????????/subscription/*/????????-????-????-????-????????????.* => GET => origin response pull.py + cache (no querystring)

_/connection/????????-????-????-????-????????????/subscription/*/????????-????-????-????-????????????/*.* => GET => origin response pull.py + cache (no querystring)


_/* => 403 + cache everything

* => GET + cache everything

---


CORE FUNCTIONS

* initialise (finalised)
    - triggered by administrator to initialise a new installation
    - event => {key: '', ?name: ''}
    - returns True when complete

* schema (finalised)
    - triggered on-demand by an administrator
    - updates schema data to all system paths under /schema

* write (finalised)
    - triggered as an endpoint for a CDN or API originated PUT / PATCH / POST / DELETE request, or a websocket $put/$post/$patch/$delete message
    - writes/deletes a connection configuration to _/connection/{connection_id}.json (finalised) OR
    - writes/deletes a view configuration to /view/{view_id}.json via /connection/{connection_id}/view/{view_id}.json (finalised) OR
    - writes/deletes an private asset to _/asset/{assetpath} via _/connection/{connection_id}/asset/{path} (finalised) OR
    - writes/deletes an static asset to {path} via ~connection/{connection_id}/static/{path} (finalised) OR
    - writes/deletes a query configuration to /query/{class_name}/{query_id}.json via /connection/{connection_id}/query/{class_name}/{query_id}.json (finalised) OR
    - writes/deletes a feed configuration to /feed/{class_name}/{query_id}/{connection_id}.json via /connection/{connection_id}/feed/{class_name}/{query_id}.json (finalised) OR 
    - writes/deletes a subscription configuration to /subscription/{class_name}/{record_id}/{connection_id}.json via /connection/{connection_id}/subscription/{class_name}/{record_id}.json (finalised) OR 
    - writes/deletes a system module configuration to /system/{scope}/{module}.json via /connection/{connection_id}/system/{scope}/{module}.json (finalised) OR
    - writes a record to /record/{class_name}/{record_id}.json via /connection/{connection_id}/record/{class_name}/{record_id}.json (finalised) OR 
    - writes a record field to /record/{class_name}/{record_id}[field_name].json via /connection/{connection_id}/record/{class_name}/{record_id}/{field_name}.json (finalised)
    - generates a version record at /version/{class_name}/{record_id}/{version_id}.json (finalised)

    
* react-connection (finalised)
    - triggered by writes at _/connection/{connection_id}.json
    - deletes all objects under _/connection/{connection_id}/*

* react-query.py (finalised)
    - triggered by writes at /query/{class_name}/{query_id}.json
    - for each field in /vector/{class_name}/, remove the query_id if the field name is not in query->vector
    - for each query->vector, ensure that the query_id is present in /vector/{class_name}.json
    - trigger query for every record in /record/{class_name}

* react-feed.py (finalised)
    - triggered by writes at /feed/{class_name}/{query_id}/{connection_id}/*
    - trigger view for each view configuration in feed->view

* react-subscription (finalised)
    - triggered by writes at /subscription/{class_name}/{record_id}/{connection_id}/*
    - trigger view.py from the subscription

* react-version.py (finalised)
    - triggered by new objects at /version/{class_name}/{record_id}/{version_id}.json
    - uses /vector/{class_name}/{field_name}.json to find affected queries 
    - triggers query with the full record for each affected query
    - lists /subscription/{class_name}/{record_id}/* to find affected connections
    - triggers mask for each affected connection

* react-index.py (finalised)
    - triggered by new/updated objects at /query/{class_name}/{query_id}/{record_initial}.json
    - uses /feed/{class_name}/{query_id}/{connection_id}/* to find affected connections
    - triggers index.py for each affected connection

* react-connection-record.py (finalised)
    - triggered by new/updated/deleted objects in /connection/{connection_id}/record/{class_name}/{record_id}.json
    - removes the relevant record_id from /connection/{connection_id}/query/{class_name}/{query_id}/{index_initial}.json if the masked value is empty
    - uses /subscription/{class_name}/{record_id}/{connection_id}/* to find affected views for this connection and record
    - trigger view for each affected subscription view 
    
* react-connection-index.py (finalised)
    - triggered by new/updated/deleted /connection/{connection_id}/query/{class_name}/{query_id}/{index_initial}.json
    - use /feed/{class_name}/{query_id}/{connection_id}/* to find affected views for this connection and query
    - trigger view for each affected feed view


* index (finalised)
    - triggered by react-index
    - event => {'connection_id': affected_connection, 'class_name': class_name, 'query_id': query_id, 'index': index}
    - gets the index
    - for each record_id calls mask with the query_id to trigger mask to include the record_id into the relevant index if the masked record is non-empty
    
* validate (finalised)
    - triggered by write
    - {'entity': entity, 'switches': {'entity_type': entity_type, 'class_name'?: class_name?, 'entity_id': entity_id}}
    - validate the given record according to its datatype
    - return True if valid else False
        
* authentication (finalised)
    - triggered by write.py
    - event => {authentication_channel_name: {credentials}}
    - takes care of authentication sub-processes
    - returns a connection object with (at least) a 'mask' property, which is overlaid onto _/connection/{connection_id}.json

* query (finalised)
    - triggered by react-query.py, react-version.py
    - executes the given query using the given record 
    - returns True if matching

* mask.py (finalised)
    - triggered by write.py, react-version.py, react-index.py, react-connection-record.py, react-connection-index.py
    - event = {'connection_id': '', 'entity_type': '', 'method': '', ?'path': [], ?'class_name': '', ?'entity_id': '', ?entity: {}, ?query_id}
    - given a connection_id and a record, writes the masked version of the record to /connection/{connection_id}/record/{class_name}/{record_id}.json
    
* view.py (finalised)
    - triggered by react-feed.py, react-subscription.py, react-view.py, react-connection-record.py, react-connection-index.py
    - event => {'connection_id': '', 'class_name': '', 'entity_type': '',  'entity_id': '' 
        'view': {view='', processor='', ?options={}, ?assets={alias: assetpath}, ?field_name='', ?content_type='', ?suffix='', ?expires=0, ?sort_field='', ?sort_direction='', ?min_index=0, ?max_index=0}}
    - runs the given view with the given masked record/query results and writes the result to the relevant view path(s)



EXTENSION FUNCTIONS

* authentication/sudo (finalised)
    - triggered by authentication
    - event => {credentials: {key: ''}, options: {key: ''}}
    - returns a connection object with (at least) a 'mask' property, which is overlaid onto _/connection/{connection_id}.json to enable administrator access
    - remove this function completely to disable administrator access

* query/books (finalised)
    - triggered by query
    - event => {'purpose': 'query', 'record': {}, 'options': {}}
    - an example query to return various slices of book records
    - returns True if the given record matches the query

* view/element (finalised)
    - triggered by view.py
    - event => {"options", "assets", "entity_type", switches": {"connection_id", "class_name", "entity_id", "field_name", "sort_field", "sort_direction", "page_name", "suffix"},
                    "page", "total_result_count": 1, "view_result_count"}
    - an example view to return records as custom HTML elements
    - returns an object with content_type, encoding and the base64-encoded text of the HTML element

-----

ENTITY TYPES

connection => {mask={}}

view => {processor='', ?options={}, ?assets={alias: assetpath}, ?field_name='', ?content_type='', ?suffix='', ?expires=0, ?sort_field='', ?sort_direction='', ?min_index=0, ?max_index=0}

query => {processor='', ?options={}, vector=[], ?count=0}

daemon => {state: '', processor: {package_source_code: '', package_source_url: '', package_image_uri: '', code_checksum: '', 
    ?deployment_options: {}}, ?entity_map: {}, ?connection: ''}

feed => {view='', processor='', ?options={}, ?assets={alias: assetpath}, ?field_name='', ?content_type='', ?suffix='', ?expires=0, ?sort_field='', ?sort_direction='', ?min_index=0, ?max_index=0}

subscription => {view='', processor='', ?options={}, ?assets={alias: assetpath}, ?field_name='', ?content_type='', ?suffix='', ?expires=0}

system => {}

record => {@type, @id,  ...as per various schemas conforming to it's own @type... }


-----


SYSTEM CONFIGURATION FORMAT

/system/{scope}/{module}.json  => /{entity_type}/{class_name}/{entity_id}.json



e.g. 

/system/authentication/password.json => {"processor": "lambda function name", "options": {free form map of options passed to function}, "priority": 0}
/system/authentication/key.json => {"processor": "lambda function name", "options": {free form map of options passed to function}, "priority": 1}



----- 

MASK FORMAT

{"*": "*"}  =>    all permissions 

{"record": "*"}  => can do anything with any record

record mask = {"record": {"GET": "*"}}   => can GET (view) any record

{"record": {"GET": {"Book": "*"}}}   => can GET (view) any Book record

{"record": {"GET": {"Book": {"mask-function-id-1": {"options1": 1}, "mask-function-2": {"option2": 234}}}}}  => the allowfields of mask-function-1 and mask-function-2 will be used to determine which fields 
of Book record the connection can GET (view)
 

{"asset": {"GET": {"file.png": "*"} } }  => can view _/asset/file.png

{"asset": {"GET": {"profiles/": "*"} } }   => can view any file under the _/profiles/ path

{"asset": {"GET": {"profiles/": {"testuser.png": "*"} } } }  => cam view the file _/profiles/testuser.png

{"asset": {"GET": {"profiles/": {"testuser.png": {"mask-function-id": {"option1": 123}}}}}}  => if the result of mask-function-id is True, then can view _/profiles/testuser.png

---

REGIONAL OPTIMISATION

US-EAST-1 "Edge"
* "edge" functions are deployed in the us-east-1 region, and then used as Lambda@Edge functions with the CDN behaviours

All Active Regions
* create a bucket within that region to receive requests (a "request bucket")
* deploy the region/request function to the region
* region/request function is triggered by all object creation in it's region request bucket

---

Browser Tests: 

PUT connection:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/connect.json', 
    {method: 'PUT', headers: {"Content-Type": "application/json"}, body: JSON.stringify(
        {sudo: {key: "9536576b-74ae-4894-b285-ba14c3391f0a"}}
    ) }
).then(r => console.log(r))

PUT view:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/view/479a63f9-a2b4-4f94-8047-74b6fe2f22b5.json', 
    {method: 'PUT', headers: {"Content-Type": "application/json"}, body: JSON.stringify(
        {"processor": "json", "content_type": "application/json", "suffix": "json"}
    ) }
).then(r => console.log(r))

PUT mask:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/mask/8ab8a73e-cd35-4e67-a0be-b92f25beb7a7.json', 
    {method: 'PUT', headers: {"Content-Type": "application/json"}, body: JSON.stringify(
        {"*": "*"}
    ) }
).then(r => console.log(r))

PUT asset:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/asset/pixel.png', 
    {method: 'PUT', headers: {"Content-Type": "image/png"}, body: "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAFUlEQVR42mNMN27/z0AEYBxVSF+FAIOrFUtBFtYjAAAAAElFTkSuQmCC" }
).then(r => console.log(r))

PUT static:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/static/pixel.png', 
    {method: 'PUT', headers: {"Content-Type": "image/png"}, body: "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAFUlEQVR42mNMN27/z0AEYBxVSF+FAIOrFUtBFtYjAAAAAElFTkSuQmCC" }
).then(r => console.log(r))

PUT query:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/query/Book/9886c382-4b22-454d-8910-bb1415018421.json', 
    {method: 'PUT', headers: {"Content-Type": "application/json"}, body: JSON.stringify(
        {"processor": "books", "vector": ["name", "numberOfPages"], "options": {"pagesFilter": true, "minPages": 1, "maxPages": 99}}
    ) }
).then(r => console.log(r))

PUT feed:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/feed/Book/9886c382-4b22-454d-8910-bb1415018421/c85a6fe3-1082-4e32-8075-92ea3b34bc1e.json', 
    {method: 'PUT', headers: {"Content-Type": "application/json"}, body: JSON.stringify(
        {"view": "479a63f9-a2b4-4f94-8047-74b6fe2f22b5"}
    ) }
).then(r => console.log(r))

PUT subscription ***:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/subscription/Book/87370050-971f-4cd9-9c32-1072c6ac3c52/46976fe6-599d-47e9-82a2-bb465da27307.json', 
    {method: 'PUT', headers: {"Content-Type": "application/json"}, body: JSON.stringify(
        {"view": "479a63f9-a2b4-4f94-8047-74b6fe2f22b5"}
    ) }
).then(r => console.log(r))

PUT system:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/system/authentication/sudo.json', 
    {method: 'PUT', headers: {"Content-Type": "application/json"}, body: JSON.stringify(
        {"processor":"liveelement-scale-extension-authentication-sudo","options":{"name":"system","key":"d0119461133df7012bcb1f1b684fe57ce4faa12644181fc84fa39e7a20d39683c987e2a65c3a79c02203213249e4491abb087d5da14e628c477f0dbd964e1a20"}}
    ) }
).then(r => console.log(r))

PUT record:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/record/Book/87370050-971f-4cd9-9c32-1072c6ac3c52.json', 
    {method: 'PUT', headers: {"Content-Type": "application/json"}, body: JSON.stringify(
        {"@type": "Book", "@id": "87370050-971f-4cd9-9c32-1072c6ac3c52", "name": "Test Book", "numberOfPages": 10}
    ) }
).then(r => console.log(r))

PUT record field:
fetch(
    'https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/record/Book/87370050-971f-4cd9-9c32-1072c6ac3c52/numberOfPages.json', 
    {method: 'PUT', headers: {"Content-Type": "application/json"}, body: JSON.stringify(
        11
    ) }
).then(r => console.log(r))

GET record subscription
fetch('https://scale.live-element.net/_/connection/74facaff-c792-4c70-b8a4-71b3ad78d3f6/subscription/Book/87370050-971f-4cd9-9c32-1072c6ac3c52.json').then(r => r.json()).then(r => console.log(r))





_/connection/????????-????-????-????-????????????/subscription/*/????????-????-????-????-????????????/*.* - GET

_/connection/????????-????-????-????-????????????/subscription/*/????????-????-????-????-????????????.* - GET **

_/connection/????????-????-????-????-????????????/feed/*/????????-????-????-????-????????????/*/*/*/*-*.* - GET **

_/connection/????????-????-????-????-????????????/record/*/????????-????-????-????-????????????/*.json - PUT **

_/connection/????????-????-????-????-????????????/record/*/????????-????-????-????-????????????.json - PUT **

_/connection/????????-????-????-????-????????????/subscription/*/????????-????-????-????-????????????/????????-????-????-????-????????????.json - PUT **

_/connection/????????-????-????-????-????????????/feed/*/????????-????-????-????-????????????/????????-????-????-????-????????????.json - PUT **

_/connection/????????-????-????-????-????????????/query/*/????????-????-????-????-????????????.json - PUT **

_/connection/????????-????-????-????-????????????/asset/* - PUT **

_/connection/????????-????-????-????-????????????/static/* - PUT **

_/connection/????????-????-????-????-????????????/view/????????-????-????-????-????????????.json - PUT **

_/connection/????????-????-????-????-????????????/connect.json - PUT **

_/connection/????????-????-????-????-????????????/system/*/*.json - PUT **

_/connection/????????-????-????-????-????????????/error/*.html - PUT **

_/* - 403

Default (*) - 200



WEB SOCKET

* read-only, solely there as an alternative to polling for changes
* $connect to create a socket
* $disconnect to remove a socket
* $connect/$disconnect => adds/removes "socket" property to the connect.json object with the socket_id
* from then on any changes to _/connection/{connection_id}/{feed|subscription} paths will be echoes to the websocket
* websocket messages structure {meta: {path: '', content-type: '', ... }, body: '$base64 encoded bytes'}



CHANNEL

* PUT => _/connection/{connection_id}/channel/{channel_id}/connect.json => {receiveKey, sendKey, adminKey}
saves {receiveKey, sendKey, adminKey} to _/channel/{channel_id}/connect.json

* $connect => _/channel/{channel_id}/{receiveKey}
saves $socket_id to _/channel/{channel_id}/sockets/{initial}.json => [$socket_id]

* $disconnect => _/channel/{channel_id}/{receiveKey}
removes $socket_id from _/channel/{channel_id}/sockets/{initial}.json => [$socket_id]

* POST => _/channel/{channel_id}/{sendKey} => message
edge-channel invokes core-channel which retrieves channel sockets lists, for each invokes core-message to forward message to each socket, if send error removes socket_id

* DELETE => _/connection/{connection_id}/channel/{channel_id}/{adminKey}
removes all contents of _/channel/{channel_id}/*

